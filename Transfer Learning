# Convolutional Neural Network
# imports
import torch
import torch.nn as nn
import torch.optim as optim # For all optomization algorithms, SGD, Adam,...
import torch.nn.functional as F # All functions that do not have any parameters
from torch.utils.data import DataLoader #
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import torchvision
from torchvision.models import vgg16, VGG16_Weights




# set device

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

print(device)

# hyper parameters

in_channels = 3
num_classes = 10
learning_rate = 1e-3
batch_size = 1024
num_epochs = 5



# Load pretrain model and modify it
class Identity(nn.Module):
    def __init__(self):
        super(Identity, self).__init__()
    def forward(self, x):
        return x

model = torchvision.models.vgg16(weights=VGG16_Weights.DEFAULT)

for param in model.parameters():
    param.requires_grad = False
model.avgpool = Identity()
model.classifier = nn.Sequential(nn.Linear(512,100),
                                 nn.ReLU(),
                                 nn.Linear(100,10))

model.to(device)



# load data
train_dataset = datasets.CIFAR10(root = 'dataset/', train=True, transform=transforms.ToTensor(), download=True)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
test_dataset = datasets.MNIST(root = 'dataset/', train=False, transform=transforms.ToTensor(), download=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

# initialize network



# Loss and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# train network


for epoch in range(num_epochs):
    losses = []

    for batch_idx, (data,targets) in enumerate(train_loader):


        data = data.to(device=device)
        targets = targets.to(device=device)
        # get to correct shape

        # forward
        scores = model(data)
        loss = criterion(scores, targets)
        losses.append(loss.item())
        # backward
        optimizer.zero_grad()
        loss.backward( )

        # gradien descent or adam step
        optimizer.step()
    mean_loss = sum(losses)/len(losses)
    print(f"loss at epoch{epoch} was {mean_loss:.5f}")
# check the accuracy on training and test


def check_accuracy(loader, model):
    if loader.dataset.train:
        print("checking accuracy on training data")
    else:
        print("checking accuracy on test data")
    num_correct = 0
    num_samples = 0
    model.eval()
    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)

            scores1 = model(x)
            _, predictions = scores1.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)
        print(f"got {num_correct} / {num_samples} with accuracy {float(num_correct)/float(num_samples)*100:.2f}")
    model.train()


check_accuracy(train_loader, model)
check_accuracy(test_loader, model)
print("done")
