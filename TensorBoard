# run this in console 
# tensorboard --logdir runs

import torch
import torchvision
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torchvision.datasets as datasets
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from tqdm import tqdm
from torch.utils.tensorboard import SummaryWriter # to print to tensorboard
# Simple CNN


class CNN(nn.Module):
    def __init__(self, in_channels=3,num_classes=10):
        super(CNN,self).__init__()
        self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=8, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=(2,2), stride=(2,2))
        self.conv2 = nn.Conv2d(in_channels=8, out_channels=16, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(16*7*7, num_classes)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool(x)
        x = F.relu(self.conv2(x))
        x = self.pool(x)
        x = x.reshape(x.shape[0], -1)
        x = self.fc1(x)
        return x
# Set Device

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
# hyperparameters


#input_size = 784
num_classes = 10
#learning_rate = 0.001
in_channels = 1
#batch_size = 64
num_epochs = 1

#load data
train_dataset = datasets.MNIST(root = 'dataset/', train=True, transform=transforms.ToTensor(), download=True)
#test_dataset = datasets.MNIST(root = 'dataset/', train=False, transform=transforms.ToTensor(), download=True)
#test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=True)

#initialize network



#Loss and Optimizer



#train network


batch_sizes = [256] #[2, 64, 1024]
learning_rates = [0.001]#[0.1, 0.01, 0.001, 0.0001]
classes = ["1", "0", "2", "3", "4", "5", "6", "7", "8", "9"]
for batch_size in batch_sizes:
    for learning_rate in learning_rates:
        step = 0
        model = CNN(in_channels=in_channels, num_classes=num_classes).to(device)
        model.train()
        criterion = nn.CrossEntropyLoss()
        train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
        optimizer = optim.Adam(model.parameters(), lr=learning_rate, weight_decay=0.0)
        writer = SummaryWriter(f"runs/MNIST/miniBatchSize {batch_size} LR {learning_rate}")

        for epoch in range(num_epochs):
            losses = []
            accuracies = []
            for batch_idx, (data,targets) in enumerate(tqdm(train_loader)):
                data = data.to(device=device)
                targets = targets.to(device=device)
                #get to correct shape
                #data = data.reshape(data.shape[0], -1)
                #forward
                scores = model(data)
                loss = criterion(scores,targets)
                losses.append(loss.item())
                #backward
                optimizer.zero_grad()
                loss.backward( )
                optimizer.step()

                #gradien descent or adam step
                #optimizer.step()
                # Calculate 'Running' training accuracy
                features = data.reshape(data.shape[0], -1)

                img_grid = torchvision.utils.make_grid(data)

                _, predictions = scores.max(1)
                num_correct = (predictions == targets).sum()
                running_training_acc = float(num_correct) / float(data.shape[0])
                accuracies.append(running_training_acc)
                # Plot to tensor board
                class_labels = [classes[label] for label in predictions]
                writer.add_image("MNIST images", img_grid)
                writer.add_histogram("fc1", model.fc1.weight)
                writer.add_scalar("Training Loss", loss, global_step=step)
                writer.add_scalar("Training accuracy ", running_training_acc, global_step=step)
                if batch_idx == 230:
                    writer.add_embedding(features, metadata=class_labels, label_img=data, global_step=batch_idx)


                step += 1
            writer.add_hparams({"lr": learning_rate, "bsize": batch_size},
                               {"accuracy": sum(accuracies) / len(accuracies),
                                "loss": sum(losses) / len(losses)})
            print(f"Mean loss this epoch was{sum(losses)/len(losses)}")

